{"ast":null,"code":"import api from \"./api-config\"; // login user function that takes in user's form data (username / password)\n\nexport const loginUser = async loginData => {\n  // access backend login route for request\n  // send form data under key of authentication\n  // assign response to what backend sends\n  const resp = await api.post(\"/auth/login\", {\n    authentication: loginData\n  }); // place token in local storage\n\n  localStorage.setItem(\"authToken\", resp.data.token); // place token in authorization header attached to same axios instance\n\n  api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`; // return user data\n\n  return resp.data.user;\n}; // register user function that takes in submitted sign up form data\n\nexport const registerUser = async registerData => {\n  // access user controller for create method\n  const resp = await api.post(\"/users/\", {\n    user: registerData\n  });\n  localStorage.setItem(\"authToken\", resp.data.token);\n  api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`;\n  return resp.data.user;\n}; // verify function for what user refreshes or accidentally closes page\n\nexport const verifyUser = async () => {\n  // get token from local storage\n  const token = localStorage.getItem(\"authToken\"); // conditional in case user doesn't have token\n\n  if (token) {\n    // set header with saved token\n    api.defaults.headers.common.authorization = `Bearer ${token}`; // make api call that hits verify method and authorize request on backend\n\n    const resp = await api.get(\"/auth/verify\"); // when found, return data\n\n    return resp.data;\n  } // no token found  return null\n\n\n  return null;\n}; // function to help with log out\n\nexport const removeToken = () => {\n  // remove token from headers\n  api.defaults.headers.common.authorization = null;\n};","map":{"version":3,"sources":["/Users/rachelramberg/General_Assembly/sei/loon/projects/P-4/fithub/client/src/services/auth.js"],"names":["api","loginUser","loginData","resp","post","authentication","localStorage","setItem","data","token","defaults","headers","common","authorization","user","registerUser","registerData","verifyUser","getItem","get","removeToken"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,SAAP,IAAqB;AAC5C;AACA;AACA;AACA,QAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,aAAT,EAAwB;AAAEC,IAAAA,cAAc,EAAEH;AAAlB,GAAxB,CAAnB,CAJ4C,CAK5C;;AACAI,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,IAAI,CAACK,IAAL,CAAUC,KAA5C,EAN4C,CAO5C;;AACAT,EAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAASV,IAAI,CAACK,IAAL,CAAUC,KAAM,EAAtE,CAR4C,CAS5C;;AACA,SAAON,IAAI,CAACK,IAAL,CAAUM,IAAjB;AACD,CAXM,C,CAaP;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,YAAP,IAAwB;AAClD;AACA,QAAMb,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,SAAT,EAAoB;AAAEU,IAAAA,IAAI,EAAEE;AAAR,GAApB,CAAnB;AACAV,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,IAAI,CAACK,IAAL,CAAUC,KAA5C;AACAT,EAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAASV,IAAI,CAACK,IAAL,CAAUC,KAAM,EAAtE;AACA,SAAON,IAAI,CAACK,IAAL,CAAUM,IAAjB;AACD,CANM,C,CAQP;;AACA,OAAO,MAAMG,UAAU,GAAG,YAAY;AACpC;AACA,QAAMR,KAAK,GAAGH,YAAY,CAACY,OAAb,CAAqB,WAArB,CAAd,CAFoC,CAGpC;;AACA,MAAIT,KAAJ,EAAW;AACT;AACAT,IAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAASJ,KAAM,EAA5D,CAFS,CAGT;;AACA,UAAMN,IAAI,GAAG,MAAMH,GAAG,CAACmB,GAAJ,CAAQ,cAAR,CAAnB,CAJS,CAKT;;AACA,WAAOhB,IAAI,CAACK,IAAZ;AACD,GAXmC,CAYpC;;;AACA,SAAO,IAAP;AACD,CAdM,C,CAgBP;;AACA,OAAO,MAAMY,WAAW,GAAG,MAAM;AAC/B;AACApB,EAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA4C,IAA5C;AACD,CAHM","sourcesContent":["import api from \"./api-config\";\n\n// login user function that takes in user's form data (username / password)\nexport const loginUser = async (loginData) => {\n  // access backend login route for request\n  // send form data under key of authentication\n  // assign response to what backend sends\n  const resp = await api.post(\"/auth/login\", { authentication: loginData });\n  // place token in local storage\n  localStorage.setItem(\"authToken\", resp.data.token);\n  // place token in authorization header attached to same axios instance\n  api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`;\n  // return user data\n  return resp.data.user;\n};\n\n// register user function that takes in submitted sign up form data\nexport const registerUser = async (registerData) => {\n  // access user controller for create method\n  const resp = await api.post(\"/users/\", { user: registerData });\n  localStorage.setItem(\"authToken\", resp.data.token);\n  api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`;\n  return resp.data.user;\n};\n\n// verify function for what user refreshes or accidentally closes page\nexport const verifyUser = async () => {\n  // get token from local storage\n  const token = localStorage.getItem(\"authToken\");\n  // conditional in case user doesn't have token\n  if (token) {\n    // set header with saved token\n    api.defaults.headers.common.authorization = `Bearer ${token}`;\n    // make api call that hits verify method and authorize request on backend\n    const resp = await api.get(\"/auth/verify\");\n    // when found, return data\n    return resp.data;\n  }\n  // no token found  return null\n  return null;\n};\n\n// function to help with log out\nexport const removeToken = () => {\n  // remove token from headers\n  api.defaults.headers.common.authorization = null;\n};\n"]},"metadata":{},"sourceType":"module"}